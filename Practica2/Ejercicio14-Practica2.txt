program Eje14;
Uses crt;
const
  df = 2;
  valorAlto = '9999';
type

  vuelo = record
    destino : String[12];
    fecha : String[12];
    hora : String[12];
    cantAsientos : integer;
  end;

  venta = record
    destino : String[12];
    fecha : String[12];
    hora : String[12];
    asientosVen : integer;
  end;

  maestro = file of vuelo;

  detalle = file of venta;

  vector = array[1..df] of detalle;
  vecVentas = array[1..df] of venta;

  reglista = record
    destino : String[12];
    fecha : String[12];
    hora : String[12];
  end;

  lista = ^nodo;

  nodo = record
    dato : reglista;
    sig : lista;
  end;

procedure leervuelo(var reg : vuelo);
begin
  write('Ingrese destino ');
  readln(reg.destino);
  write('Ingrese fecha ');
  readln(reg.fecha);
  write('Ingrese hora ');
  readln(reg.hora);
  write('Ingrese cantidad de asientos ');
  readln(reg.cantAsientos);
end;

procedure cargarArchivo(var mae : maestro);
var
  i : integer;
  reg : vuelo;
begin
  rewrite(mae);
  for i := 1 to 3 do begin
    leervuelo(reg);
    write(mae, reg);
  end;
  close(mae);
end;

procedure leerdet(var reg : venta);
begin
  write('Ingrese destino ');
  readln(reg.destino);
    if(reg.destino <> valorAlto) then begin
    write('Ingrese fecha ');
    readln(reg.fecha);
    write('Ingrese hora ');
    readln(reg.hora);
    write('Ingrese cantidad de asientos vendidos ');
    readln(reg.asientosVen);
  end;
end;

procedure cargarDetalle(var vec : vector);
var
  i : integer;
  reg : venta;
begin
  for i := 1 to df do begin
    rewrite(vec[i]);
  end;

  for i := 1 to df do begin
    leerdet(reg);
    while(reg.destino <> valorAlto) do begin
      write(vec[i], reg);
      leerdet(reg);
    end;
  end;

  for i := 1 to df do begin
    close(vec[i]);
  end;
end;

procedure leer(var det : detalle; var regD : venta);
begin
  if(not eof(det)) then
    read(det, regD)
  else begin
    regD.destino := valorAlto;
    end;
end;

procedure minimo(var v : vector; var regD : vecVentas; var min : venta);
var
  i , pos : integer;
begin
  min.destino := valorAlto;
  for i := 1 to df do begin

    if(regD[i].destino < min.destino) then begin
       min := regD[i];
       pos := i;
    end;

  end;
   leer(v[pos], regD[pos]);
end;

procedure actualizarArchivo(var mae : maestro; v : vector);
var
  i : integer;
  regM : vuelo;
  regD : vecVentas;
  min : venta;
begin
  reset(mae);
  for i := 1 to df do begin
    reset(v[i]);
    leer(v[i],regD[i]);
  end;

  minimo(v,regD,min);
  while(min.destino <> valorAlto) do begin
  
    read(mae, regM);
    
    while(regM.destino <> min.destino) do
      read(mae, regM);
      
    while(min.destino = regM.destino) do begin
      regM.cantAsientos := regM.cantAsientos - min.asientosVen;
      minimo(v,regD,min);
    end;
    
    seek(mae, filepos(mae)-1);
    write(mae, regM);
    
  end;
  
  for i := 1 to df do
    close(v[i]);
  close(mae);
end;

procedure agregarAtras(var l, ult : lista; reg : vuelo);
var
  nue : lista;
begin
  new(nue);
  nue^.dato.destino := reg.destino;
  nue^.dato.fecha := reg.fecha;
  nue^.dato.hora := reg.hora;
  nue^.sig := nil;
  if(l = nil) then
    l := nue
  else
    ult^.sig := nue;
  ult := nue;
end;

procedure generarLista(var mae : maestro; var l : lista; cant : integer);
var
  regM : vuelo;
  ult : lista;
begin
  reset(mae);
  while(not eof(mae)) do begin
    read(mae, regM);
    if(regM.cantAsientos < cant) then
      agregarAtras(l,ult,regM);
  end;
  close(mae);
end;

procedure imprimirMaestro(var mae : maestro);
var
  reg : vuelo;
begin
  reset(mae);
  while(not eof(mae)) do begin
    read(mae, reg);
    writeln(reg.destino,' ',reg.hora,' ',reg.cantAsientos);
  end;
  close(mae);
end;

procedure imprimirDetalle(var vec : vector);
var
  i : integer;
  reg : venta;
begin
   for i := 1 to df do
     reset(vec[i]);
     
     for i := 1 to df do begin
       while(not eof(vec[i])) do begin
         read(vec[i], reg);
         writeln(reg.destino,' ',reg.hora,' ',reg.asientosVen);
       end;
     end;
     
   for i := 1 to df do  
     close(vec[i]);
end;

procedure imprimirlista(l : lista);
begin
  while(l <> nil) do begin
    writeln(l^.dato.destino);
    l := l^.sig;
  end;
end;

var
  mae : maestro;
  vec : vector;
  i, cant : integer;
  nro : String[12];
  l : lista;
begin
  clrscr;
  l := nil;

  assign(mae,'maestro');
  for i := 1 to df do begin
    Str(i,nro);
    assign(vec[i],'detalle'+nro);
  end;

  //cargarArchivo(mae);
 
  writeln('---- Sin actualizar ----');
  imprimirMaestro(mae);

  //cargarDetalle(vec);
  
  writeln('---- ventas ---');
  imprimirDetalle(vec);
  
  actualizarArchivo(mae,vec);
  writeln('---- Actualizado ---');
  imprimirMaestro(mae);

  writeln;
  write('Ingrese cantidad ');
  readln(cant);
  generarLista(mae,l,cant);

  writeln;
  imprimirlista(l);

  readln;
end.